<!DOCTYPE html>
<html lang="en" class="has-aside-left has-aside-mobile-transition has-navbar-fixed-top has-aside-expanded">

<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Profile - Admin</title>

  <!-- Fonts -->
  <link rel="dns-prefetch" href="https://fonts.gstatic.com">
  <link href="https://fonts.googleapis.com/css?family=Nunito" rel="stylesheet" type="text/css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.4/css/bulma.min.css">

  <script>
    function sendCoordinatesToServer(latitude, longitude) {
            // Send the coordinates to the server using a POST request
            fetch('/coord', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ latitude, longitude }),
            })
            .then(response => response.json())
            .then(data => {
                console.log(data.message);
                alert(data.message);
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error sending coordinates to the server');
            });
        }

        // Check if geolocation is available in the browser
        if ("geolocation" in navigator) {
            // Get the user's current position
            navigator.geolocation.getCurrentPosition(function(position) {
                const latitude = position.coords.latitude;
                const longitude = position.coords.longitude;

                // Call the function to send coordinates to the server
                sendCoordinatesToServer(latitude, longitude);
            }, function(error) {
                console.error('Error getting location:', error);
                alert('Error getting location. Please allow geolocation access.');
            });
        } else {
            alert("Geolocation is not available in this browser.");
        }
  </script>
</head>
<body>
  <div id="app">
    <%- include('partials/TopNav.ejs') %>
    <section class="hero is-hero-bar">
      <div class="hero-body">
        <div class="level">
          <div class="level-left">
            <div class="level-item">
              <h1 style="width: 100%;" class="title">
                Welcome <strong style="cursor: pointer;" onclick="window.location.href ='/profile'"><span style="color: #00d1b2;"> <%- user.name%> <%- user.surname%></span> ðŸ˜Š </strong>!        
              </h1>
            </div>
          </div>
          <div class="level-right" style="display: none;">
            <div class="level-item">

              <iframe src="https://www.google.co.za/maps/@-25.5191374,31.3198485,15z?entry=ttu" frameborder="0" width=100 height=100></iframe>
            </div>
          </div>
        </div>
      </div>
    </section>
    <section class="section">
      <div class="container">
      <div class="container">
    </section>
    <section class="section" style="display: none;" id="requestform">
        <div class="container">
          <div style="width:20%;height:0;padding-bottom:20%;position:relative;">
            <iframe src="https://giphy.com/embed/3oKIPmnZ2IxoAQBta8" width="100%" height="100%" style="position:absolute" frameBorder="0" class="giphy-embed" allowFullScreen></iframe>
        
          </div>
            <h1 class="title">Add Pickup Location as Student</h1>
            <form action="/api/ride-request" id="pickupForm" class="box" method="post">
                <div class="field">
                    <label class="label">Student Name</label>
                    <div class="control">
                        <input class="input" type="text" name="studentName" readonly value="<%- user.name%> <%- user.surname%>" placeholder="Enter student name">
                    </div>
                </div>
                <div class="field">
                    <label class="label">Pickup Location</label>
                    <div class="control">
                        <input class="input" type="text" name="pickupLocation" id="pickupLocation" placeholder="Enter pickup location">
                    </div>
                </div>
                <!-- Add this code within the <body> tag of your HTML document -->
<div class="modal" id="driversModal">
  <div class="modal-background"></div>
  <div class="modal-content">
      <div class="box">
          <h1 class="title is-4">Pick a Driver</h1>
          <div class="columns is-multiline" id="driverCards">
              <!-- Driver cards will be added here dynamically -->
          </div>
      </div>
  </div>
  <a class="modal-close is-large" aria-label="close"></a>
</div>
<!-- <input type="text"id="selectedDriverCode" style="display: none;"  readonly> -->
<style>
  .rounded-square {
      width: 200px;
      height: 200px;
      border-radius: 50%;
      border: 2px solid #00d1b2;
       /* Replace with your image URL */
      background-size: cover;
      display: none;
  }
</style>
<div id="carImage" class="rounded-square"></div>
<div class="field">
  <label class="label">Pick Up Driver</label>
  <!-- <div class="control" style="display: flex;">
      <input class="input" type="text" id="carPlate" readonly>
      <input class="input" type="text" id="selectedDriver" placeholder="Click The Pick Driver Button" readonly>
      <a class="button is-primary" id="openModalButton">Pick From Available Drivers</a>
  </div> -->
</div>

<script>
  // const openModalButton = document.getElementById('openModalButton');
  const driversModal = document.getElementById('driversModal');
  const driverCards = document.getElementById('driverCards');
  const selectedDriverInput = document.getElementById('selectedDriver');
  // const selectedDriverCodeInput = document.getElementById('selectedDriverCode');
  const closeButton = driversModal.querySelector('.modal-close');
  const carImage = document.getElementById('carImage')

  // openModalButton.addEventListener('click', function () {
  //     driverCards.innerHTML = ''; // Clear previous cards
  //     fetch('/api/cars')
  //       .then(response => response.json())
  //       .then(data => {
  //         data.forEach(car => {
  //         const card = document.createElement('div');
  //         card.classList.add('column', 'is-4');
  //         card.innerHTML = `
  //             <div class="card" style="cursor: pointer;">
  //               <div class="card-image">
  //                   <figure class="image is-4by3">
  //                       <!-- Replace 'car_image.jpg' with the actual image URL -->
  //                       <img src="${car.imageUrl}" alt="Car Image">
  //                   </figure>
  //               </div>
  //               <div class="card-content">
  //                   <div class="media">
  //                       <div class="media-content">
  //                           <p class="title is-5">${car.name}</p>
  //                       </div>
  //                   </div>
  //                   <div class="content">
  //                       <!-- Car details can be added here -->
  //                       <p>Driver Code: ${car.drivercode}</p>
  //                       <p>License Plate: ${car.plate}</p>
  //                       <p>Price: R${car.bookingPrice}</p>
  //                   </div>
  //               </div>
  //           </div>
  //                     `;

  //         card.querySelector('.card').addEventListener('click', function () {
  //             selectedDriverInput.value = car.name;
  //             selectedDriverCodeInput.value = car.drivercode;
  //             document.getElementById('carPlate').value =car.plate
  //             carImage.setAttribute('style', `background-image: url('${car.imageUrl}');background-color:black;display:block`);
        
              
  //             closeModal();
  //         });

  //         driverCards.appendChild(card);
  //     })
  //       })
  //       .catch(error => {
  //         console.error('Error fetching data:', error);
  //         return
  //       });


  //     openModal(driversModal);
  // });

  function openModal(modal) {
      modal.classList.add('is-active');
  }

  function closeModal() {
      driversModal.classList.remove('is-active');
  }

  closeButton.addEventListener('click', function () {
      closeModal();
  });
</script>
                <div class="field">
                  <label class="label">Destination(Select from registered locations)</label>
                  <div class="control">
                      <div class="select">
                          <select name="destination_id" id="destination_id">
                              <option value="">Select a location</option> 
                              <% for(var i=0; i<destination_locations.length; i++) { %>
                            
                                                                        
                                <option value="<%= destination_locations[i].id %>"> 
                                  <%= destination_locations[i].name %>, 
                                  <%= destination_locations[i].addressline1 %>, 
                                  <%= destination_locations[i].addressline2 %> 
                                </option>
                              <% } %>
                              <!-- Add more options as needed -->
                          </select>
                      </div>  
                  </div>
                </div>
                <div class="field" id="otherLocationField" style="display: none;">
                  <label class="label">Other Destination</label>
                  <div class="control">
                      <input class="input" type="text" name="otherLocation" placeholder="Enter other location">
                  </div>
                </div>
                <script>
                    const destination = document.getElementById('destination_id');
                    const otherLocationField = document.getElementById('otherLocationField'); 
                    destination.addEventListener('change', function () {
                        if (destination.value === 'Other') {
                            otherLocationField.style.display = 'block';
                        } else {
                            otherLocationField.style.display = 'none';
                        }
                    });
                </script> 
                <div class="field">
                    <div class="control">
                        <button class="button is-primary" type="submit">Request Ride</button>
                    </div>
                </div>
            </form>
        </div>
    </section>
    <section class="section" id="restrictridereq">
        <div class="container">
            <h1 class="title">Opps Can't make another request please wait</h1>
            <div class="mapouter"><div class="gmap_canvas"><iframe width="600" height="500" id="gmap_canvas" src="https://maps.google.com/maps?q=university%20of%20mpumalanga&t=&z=13&ie=UTF8&iwloc=&output=embed" frameborder="0" scrolling="no" marginheight="0" marginwidth="0"></iframe><a href="https://embedgooglemap.net/124/"></a><br><style>.mapouter{position:relative;text-align:right;height:500px;width:600px;}</style><a href="https://www.embedgooglemap.net"></a><style>.gmap_canvas {overflow:hidden;background:none!important;height:500px;width:600px;}</style></div></div>
            <div class="box" >
              Time Since Your Last Request :
              <span id="lastriderequestDate">
                <% if (LastRideRequest) { %>
                  <%= LastRideRequest.requestDate %>
                <% } %>
              </span>
              <br>
              <h1 style="font-size: large;" class="title"></h1> 
              <h1 class="title" id="timeleft"></h1> 
              <div style="background-color: #a8fff2;padding: 1px;border-radius: 5px;">
                <div id="waitlinebar" style="height: 5px;border-radius: 5px;background-color: #00d1b2;"><span style="float: right;">âŒš</span></div>
              </div>
            </div>
        </div>
    </section>
    <section class="section" id="noridefrom6to18" style="display: none;">
      <div class="container">
        <div class="box">
          <h1 class="title">Sorry ðŸ˜“ You Cannot make a Ride request Until 6AM - 6PM</h1>
          <h1>This is due to these mentioned reasons:</h1>
          <div class="table-wrapper has-mobile-cards">
            <ol style="padding: 30px;">   
              <li><strong>Better Visibility:</strong> Daylight hours offer clear visibility for drivers and pedestrians, reducing accident risks.</li>
              <li><strong>Reduced Fatigue: </strong> Daytime rides minimize driver fatigue, promoting safer driving conditions and improved alertness.</li>
              <li><strong>Lower Crime Rates:</strong> Sunlit rides often occur in safer neighborhoods with lower crime rates.</li>
              <li> <strong>Enhanced Road Conditions:</strong> Daylight hours provide improved road visibility and fewer weather-related challenges.</li>
              <li><strong>Regulated Traffic:</strong> Off-peak traffic during the day leads to smoother journeys and lower congestion risks.</li>
            
            </ol>
        </div>
        </div>
          </div>
      </div>
  </section>
    <section class="section">
      <div class="container">
        <div class="box">
          <h1 class="title">My Ride Requests</h1>
          <div class="table-wrapper has-mobile-cards">
            <table class="table is-fullwidth is-striped is-hoverable is-fullwidth">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Pick Up Location</th>
                        <th>Destination</th>
                        <th>CarPlate</th>
                        <th>Driver Code</th>
                        <th>Status</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    
                    <% for(var i=0; i<UserRideRequests.length; i++) {%>
                    <tr>  
                        <td data-label="Id"><%= UserRideRequests[i].id %></td>
                        <td data-label="pickupLocation"><%= UserRideRequests[i].pickupLocation %></td>
                        <td data-label="destination">
                          <%= UserRideRequests[i].destination.name %>, 
                          <%= UserRideRequests[i].destination.addressline1 %>, 
                          <%= UserRideRequests[i].destination.addressline2 %>
                        </td>
                        <td data-label="carPlate"><%= UserRideRequests[i].car.plate %></td>
                        <td data-label="selectedDriverCode"><%= UserRideRequests[i].selectedDriverCode %></td>
                        <td data-label="Condition">
                            <small class="has-text-grey is-abbr-like"
                                title="Oct 25, 2020"><%= UserRideRequests[i].status %></small>
                        </td>
                        <td class="is-actions-cell">
                            <div class="buttons is-right">
                                <button class="button is-small is-primary"
                                    type="button">
                                    <span class="icon"><i
                                            class="mdi mdi-eye"></i></span>
                                </button>
                                <button class="button is-small is-danger"
                                    onclick="deleteCarConfirmation()" type="button">
                                    <span class="icon"><i
                                            class="mdi mdi-trash-can"></i></span>
                                </button>
                            </div>
                        </td>
                    </tr>
                    <!-- Car Details Modal -->
                    <script>
                        const deleteCarConfirmation = () => {

                            Swal.fire({
                                title: `Are you sure, You Want to delete?`,
                                text: "You won't be able to revert this!",
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonColor: '#3085d6',
                                cancelButtonColor: '#d33',
                                confirmButtonText: 'Yes, delete it!'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    Swal.fire(
                                        'Deleted!',
                                        'Your Car has been deleted.',
                                        'success'
                                    )
                                }
                            })
                        }
                    </script>
                    <% } %>

                </tbody>
            </table>
        </div>
        </div>
          </div>
      </div>
  </section>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('pickupForm');

    form.addEventListener('submit', function(event) {
        event.preventDefault();

        // const requester = document.getElementById('requester').value; // The user here is a requester
        // const selectedDriverCode = document.getElementById('selectedDriverCode').value;
        const pickupLocation = document.getElementById('pickupLocation').value;
        // const destination = document.getElementById('destination').value;
        // const selectedDriver = document.getElementById('selectedDriver').value;
        // const carPlate = document.getElementById('carPlate').value;
        // const pickupLocationSelect =  document.getElementById('pickupLocationSelect').value;
        let finalDestination = destination.value;
        if (destination ==='Other'){
          finalDestination = document.getElementById('otherLocationField').value;
        }
        // Show a confirmation dialog using SweetAlert
        Swal.fire({
            title: 'Confirm Requesting A ride',
            text: `You are about to request a ride from ${pickupLocation} to ${finalDestination}\n\nAre you sure you want to Continue?`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#00d1b2',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, Continue!'
        }).then((result) => {
            if (result.isConfirmed) {
                            // Construct the request body with form data
            console.log(pickupLocation, finalDestination.value);
            const requestBody = {
                // requester: requester,
                // selectedDriverCode: selectedDriverCode,
                pickupLocation: pickupLocation,
                destination: finalDestination.value,
                // carPlate: carPlate
            };

            console.log(JSON.stringify(requestBody))
            // Send the request using Fetch API
            // fetch('/api/ride-request', {
            //     method: 'POST',
            //     headers: {
            //       "Content-Type": "application/json",
            //     },
            //     body: JSON.stringify(requestBody)
            // })
            // .then(response => response.json())
            // .then(data => {
            //     // Handle response from the server
            //     console.log('Server response:', data);
            // })
            // .catch(error => {
            //     console.error('Error sending data:', error);
            // })
            form.submit()
            form.reset();  
            }
        });
    });
});

    </script>

<script>


  const noridefrom6to18DOM = document.getElementById('noridefrom6to18')

  const currentTime = new Date().getHours();
  console.log(currentTime)

  function calculateTimeDifference(inputDate) {
      // Convert the input date to a JavaScript Date object
      const enteredDate = new Date(inputDate);

      // Get the current date and time
      const currentDate = new Date();

      // Calculate the time difference in milliseconds
      const timeDifferenceMs = currentDate - enteredDate;

      // Calculate hours, minutes, and seconds
      const hoursDifference = Math.floor(timeDifferenceMs / (1000 * 60 * 60));
      const minutesDifference = Math.floor((timeDifferenceMs % (1000 * 60 * 60)) / (1000 * 60));
      const secondsDifference = Math.floor((timeDifferenceMs % (1000 * 60)) / 1000);

      return {
        hours: hoursDifference,
        minutes: minutesDifference,
        seconds: secondsDifference
      };
    }
  
    const restrictridereqDOM = document.getElementById("restrictridereq")
    const requestformDOM = document.getElementById("requestform")
    const timeLeft = document.getElementById("timeleft")
    restrictridereqDOM.style.display = "none";
    const inputDate = document.getElementById('lastriderequestDate').textContent;

    function MaxRequestReached(){
      if(parseInt(`<%= numberOfRideRequestToday %>`) > 4){
        restrictridereqDOM.style.display = 'block';
        restrictridereqDOM.innerHTML = 
          `<div class="container">
            <div class="box">
              <h1 class="title" style="color:red">You have reached your MAX (${numberOfRequests}) Requests for the day</h1>
            </div>
          </div>`
        requestformDOM.style.display = 'none'
      }
    }

    if (inputDate){    
      setInterval(()=> {
        const difference = calculateTimeDifference(inputDate);
        if (difference.hours < 2){

          restrictridereqDOM.style.display = "block";
          requestformDOM.style.display = "none";
          let timeDiff = CountDownDalculateTimeDifference(`${difference.hours}:${difference.minutes}:${difference.seconds}`, `02:00:00`)
          timeLeft.textContent = `${timeDiff.timeDifference}`;
          closeCountDownAndRequestForm()
          document.getElementById('waitlinebar').style.width = `${timeDiff.percentage}%`
          MaxRequestReached()

        } else {
          restrictridereqDOM.style.display = "none";
          requestformDOM.style.display = "block";
          let timeDiff = CountDownDalculateTimeDifference(`${difference.hours}:${difference.minutes}:${difference.seconds}`, `02:00:00`)
          closeCountDownAndRequestForm()
          timeLeft.textContent = `${timeDiff.timeDifference}` ;
          MaxRequestReached()
        }
      } , 1000)
    }
    
    function closeCountDownAndRequestForm(){
      // if(currentTime > 18 || currentTime < 6){
      if(false){
        noridefrom6to18DOM.style.display = 'block';
        restrictridereqDOM.style.display = 'none';
        requestformDOM.style.display = 'none';
      }
    }

    function CountDownDalculateTimeDifference(startTime, finishTime) {
      const time1Parts = startTime.split(':').map(part => parseInt(part, 10));
      const time2Parts = finishTime.split(':').map(part => parseInt(part, 10));
      const time1Seconds = time1Parts[0] * 3600 + time1Parts[1] * 60 + time1Parts[2];
      const time2Seconds = time2Parts[0] * 3600 + time2Parts[1] * 60 + time2Parts[2];
      const timeDifferenceSeconds = Math.abs(time2Seconds - time1Seconds);
      console.log(timeDifferenceSeconds)
      const hours = Math.floor(timeDifferenceSeconds / 3600);
      const minutes = Math.floor((timeDifferenceSeconds % 3600) / 60);
      const seconds = timeDifferenceSeconds % 60;
      const timeDifference = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;

      let dur = 3600 * time2Parts[0]
      let percentage =  timeDifferenceSeconds / dur * 100

      console.log(percentage.toFixed(2))
      return {
        timeDifference,
        percentage
      };
    }
</script>

    <footer class="footer">
      <div class="container-fluid">
        <div class="level">
          <div class="level-left">
            <div class="level-item">
              Â© 2023 Infinite Techs
            </div>
          </div>
        </div>
      </div>
    </footer>

  <!-- Scripts below are for demo only -->
  <script type="text/javascript" src="javascripts/main.min.js"></script>
  <script src="
  https://cdn.jsdelivr.net/npm/sweetalert2@11.7.18/dist/sweetalert2.all.min.js
  "></script>
  <link href="
  https://cdn.jsdelivr.net/npm/sweetalert2@11.7.18/dist/sweetalert2.min.css
  " rel="stylesheet">
  <!-- Icons below are for demo only. Feel free to use any icon pack. Docs: https://bulma.io/documentation/elements/icon/ -->
  <link rel="stylesheet" href="https://cdn.materialdesignicons.com/4.9.95/css/materialdesignicons.min.css">
</body>

</html>